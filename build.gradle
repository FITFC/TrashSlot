def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: "0"
def MAVEN_REPO = System.getenv("MAVEN_REPO") ?: ""
def MAVEN_USERNAME = System.getenv("MAVEN_USERNAME") ?: ""
def MAVEN_PASSWORD = System.getenv("MAVEN_PASSWORD") ?: ""

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = "1.0." + BUILD_NUMBER
group= "net.blay09.mods"
archivesBaseName = "trashslot"

minecraft {
    version = "1.7.10-10.13.4.1492-1.7.10"
    runDir = "eclipse"
}

jar {
    appendix "mc" + minecraft.version

    manifest {
        attributes("FMLAT": "trashslot_at.cfg",
                "FMLCorePlugin": "net.blay09.mods.trashslot.coremod.TrashSlotLoadingPlugin",
                "FMLCorePluginContainsFMLMod": "true")
    }
}

task jarDev(type: Jar) {
    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    classifier "dev"
    appendix "mc" + minecraft.version
}

artifacts {
    archives jarDev
}

configurations {
    deployerJars
    provided
}

sourceSets.main.compileClasspath += [configurations.provided]

repositories {
    /*maven {
        name "xcompwiz"
        url "http://maven.xcompwiz.com"
    }*/
    ivy {
        name "InventoryTweaks"
        artifactPattern "http://build.technicpack.net/job/Inventory-Tweaks/[revision]/artifact/build/libs/[module]-[classifier]-1.58-[revision].[ext]"
    }
}

dependencies {
    //compile "com.xcompwiz.mystcraft:mystcraft:0.12.3.00:dev"
    //compile name: 'InventoryTweaks', version: '147', classifier: "deobf", ext: 'jar'
}

idea {
    module {
        inheritOutputDirs = true;
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

uploadArchives {
    dependsOn 'reobf'
    repositories {
        mavenDeployer {
            repository(url: MAVEN_REPO) {
                authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
            }

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }

            pom.withXml {
                asNode().dependencies.dependency.findAll {
                    it.scope.text() == "compile"
                }.each {
                    if(it.optional)
                        it.optional.value = 'true'
                    else
                        it.appendNode('optional', 'true');
                }
            }
        }
    }
}
